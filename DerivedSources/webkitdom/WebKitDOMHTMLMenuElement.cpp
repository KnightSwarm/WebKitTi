/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "WebKitDOMHTMLMenuElement.h"

#include "CSSImportRule.h"
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMHTMLMenuElementPrivate.h"
#include "WebKitDOMNodePrivate.h"
#include "WebKitDOMPrivate.h"
#include "gobject/ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

namespace WebKit {

WebKitDOMHTMLMenuElement* kit(WebCore::HTMLMenuElement* obj)
{
    return WEBKIT_DOM_HTML_MENU_ELEMENT(kit(static_cast<WebCore::Node*>(obj)));
}

WebCore::HTMLMenuElement* core(WebKitDOMHTMLMenuElement* request)
{
    return request ? static_cast<WebCore::HTMLMenuElement*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMHTMLMenuElement* wrapHTMLMenuElement(WebCore::HTMLMenuElement* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_HTML_MENU_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_MENU_ELEMENT, "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLMenuElement, webkit_dom_html_menu_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_COMPACT,
};

static void webkit_dom_html_menu_element_set_property(GObject* object, guint propertyId, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;

    WebKitDOMHTMLMenuElement* self = WEBKIT_DOM_HTML_MENU_ELEMENT(object);
    WebCore::HTMLMenuElement* coreSelf = WebKit::core(self);

    switch (propertyId) {
    case PROP_COMPACT: {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::compactAttr, (g_value_get_boolean(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_menu_element_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;

    WebKitDOMHTMLMenuElement* self = WEBKIT_DOM_HTML_MENU_ELEMENT(object);
    WebCore::HTMLMenuElement* coreSelf = WebKit::core(self);

    switch (propertyId) {
    case PROP_COMPACT: {
        g_value_set_boolean(value, coreSelf->fastHasAttribute(WebCore::HTMLNames::compactAttr));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_menu_element_class_init(WebKitDOMHTMLMenuElementClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->set_property = webkit_dom_html_menu_element_set_property;
    gobjectClass->get_property = webkit_dom_html_menu_element_get_property;

    g_object_class_install_property(gobjectClass,
                                    PROP_COMPACT,
                                    g_param_spec_boolean("compact", /* name */
                                                           "html_menu_element_compact", /* short description */
                                                           "read-write  gboolean HTMLMenuElement.compact", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
}

static void webkit_dom_html_menu_element_init(WebKitDOMHTMLMenuElement* request)
{
}

gboolean
webkit_dom_html_menu_element_get_compact(WebKitDOMHTMLMenuElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MENU_ELEMENT(self), FALSE);
    WebCore::HTMLMenuElement* item = WebKit::core(self);
    gboolean result = item->fastHasAttribute(WebCore::HTMLNames::compactAttr);
    return result;
}

void
webkit_dom_html_menu_element_set_compact(WebKitDOMHTMLMenuElement* self, gboolean value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MENU_ELEMENT(self));
    WebCore::HTMLMenuElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::compactAttr, value);
}

