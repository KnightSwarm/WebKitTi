/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCPeerConnection.h"

#include "Dictionary.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSMediaStream.h"
#include "JSMediaStreamTrack.h"
#include "JSRTCDTMFSender.h"
#include "JSRTCDataChannel.h"
#include "JSRTCErrorCallback.h"
#include "JSRTCIceCandidate.h"
#include "JSRTCSessionDescription.h"
#include "JSRTCSessionDescriptionCallback.h"
#include "JSRTCStatsCallback.h"
#include "JSVoidCallback.h"
#include "KURL.h"
#include "MediaStream.h"
#include "RTCDTMFSender.h"
#include "RTCDataChannel.h"
#include "RTCPeerConnection.h"
#include "RTCSessionDescription.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSRTCPeerConnectionTableValues[] =
{
    { "localDescription", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionLocalDescription), (intptr_t)0, NoIntrinsic },
    { "remoteDescription", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionRemoteDescription), (intptr_t)0, NoIntrinsic },
    { "signalingState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionSignalingState), (intptr_t)0, NoIntrinsic },
    { "iceGatheringState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionIceGatheringState), (intptr_t)0, NoIntrinsic },
    { "iceConnectionState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionIceConnectionState), (intptr_t)0, NoIntrinsic },
    { "onnegotiationneeded", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnnegotiationneeded), (intptr_t)setJSRTCPeerConnectionOnnegotiationneeded, NoIntrinsic },
    { "onicecandidate", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnicecandidate), (intptr_t)setJSRTCPeerConnectionOnicecandidate, NoIntrinsic },
    { "onsignalingstatechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnsignalingstatechange), (intptr_t)setJSRTCPeerConnectionOnsignalingstatechange, NoIntrinsic },
    { "onaddstream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnaddstream), (intptr_t)setJSRTCPeerConnectionOnaddstream, NoIntrinsic },
    { "onremovestream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnremovestream), (intptr_t)setJSRTCPeerConnectionOnremovestream, NoIntrinsic },
    { "oniceconnectionstatechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOniceconnectionstatechange), (intptr_t)setJSRTCPeerConnectionOniceconnectionstatechange, NoIntrinsic },
    { "ondatachannel", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOndatachannel), (intptr_t)setJSRTCPeerConnectionOndatachannel, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSRTCPeerConnectionTable = { 36, 31, JSRTCPeerConnectionTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSRTCPeerConnectionConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSRTCPeerConnectionConstructorTable = { 1, 0, JSRTCPeerConnectionConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSRTCPeerConnectionConstructor::constructJSRTCPeerConnection(ExecState* exec)
{
    JSRTCPeerConnectionConstructor* castedThis = jsCast<JSRTCPeerConnectionConstructor*>(exec->callee());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Dictionary rtcIceServers(exec, exec->argument(0));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Dictionary mediaConstraints(exec, exec->argument(1));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwVMError(exec, createReferenceError(exec, "RTCPeerConnection constructor associated document is unavailable"));
    RefPtr<RTCPeerConnection> object = RTCPeerConnection::create(context, rtcIceServers, mediaConstraints, ec);
    if (ec) {
        setDOMException(exec, ec);
        return JSValue::encode(JSValue());
    }
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSRTCPeerConnectionConstructor::s_info = { "webkitRTCPeerConnectionConstructor", &Base::s_info, &JSRTCPeerConnectionConstructorTable, 0, CREATE_METHOD_TABLE(JSRTCPeerConnectionConstructor) };

JSRTCPeerConnectionConstructor::JSRTCPeerConnectionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSRTCPeerConnectionConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(info()));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSRTCPeerConnectionPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(1), ReadOnly | DontDelete | DontEnum);
}

bool JSRTCPeerConnectionConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSRTCPeerConnectionConstructor, JSDOMWrapper>(exec, &JSRTCPeerConnectionConstructorTable, jsCast<JSRTCPeerConnectionConstructor*>(object), propertyName, slot);
}

ConstructType JSRTCPeerConnectionConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSRTCPeerConnection;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSRTCPeerConnectionPrototypeTableValues[] =
{
    { "createOffer", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionCreateOffer), (intptr_t)1, NoIntrinsic },
    { "createAnswer", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionCreateAnswer), (intptr_t)1, NoIntrinsic },
    { "setLocalDescription", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionSetLocalDescription), (intptr_t)1, NoIntrinsic },
    { "setRemoteDescription", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionSetRemoteDescription), (intptr_t)1, NoIntrinsic },
    { "updateIce", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionUpdateIce), (intptr_t)0, NoIntrinsic },
    { "addIceCandidate", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionAddIceCandidate), (intptr_t)1, NoIntrinsic },
    { "getLocalStreams", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetLocalStreams), (intptr_t)0, NoIntrinsic },
    { "getRemoteStreams", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams), (intptr_t)0, NoIntrinsic },
    { "getStreamById", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetStreamById), (intptr_t)1, NoIntrinsic },
    { "addStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionAddStream), (intptr_t)1, NoIntrinsic },
    { "removeStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionRemoveStream), (intptr_t)1, NoIntrinsic },
    { "getStats", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetStats), (intptr_t)1, NoIntrinsic },
    { "createDataChannel", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionCreateDataChannel), (intptr_t)1, NoIntrinsic },
    { "createDTMFSender", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionCreateDTMFSender), (intptr_t)1, NoIntrinsic },
    { "close", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionClose), (intptr_t)0, NoIntrinsic },
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionAddEventListener), (intptr_t)2, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionRemoveEventListener), (intptr_t)2, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSRTCPeerConnectionPrototypeTable = { 67, 63, JSRTCPeerConnectionPrototypeTableValues, 0 };
const ClassInfo JSRTCPeerConnectionPrototype::s_info = { "webkitRTCPeerConnectionPrototype", &Base::s_info, &JSRTCPeerConnectionPrototypeTable, 0, CREATE_METHOD_TABLE(JSRTCPeerConnectionPrototype) };

JSObject* JSRTCPeerConnectionPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCPeerConnection>(exec, globalObject);
}

bool JSRTCPeerConnectionPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCPeerConnectionPrototype* thisObject = jsCast<JSRTCPeerConnectionPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, &JSRTCPeerConnectionPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSRTCPeerConnection::s_info = { "webkitRTCPeerConnection", &Base::s_info, &JSRTCPeerConnectionTable, 0 , CREATE_METHOD_TABLE(JSRTCPeerConnection) };

JSRTCPeerConnection::JSRTCPeerConnection(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<RTCPeerConnection> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSRTCPeerConnection::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSRTCPeerConnection::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSRTCPeerConnectionPrototype::create(exec->vm(), globalObject, JSRTCPeerConnectionPrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSRTCPeerConnection::destroy(JSC::JSCell* cell)
{
    JSRTCPeerConnection* thisObject = static_cast<JSRTCPeerConnection*>(cell);
    thisObject->JSRTCPeerConnection::~JSRTCPeerConnection();
}

JSRTCPeerConnection::~JSRTCPeerConnection()
{
    releaseImplIfNotNull();
}

bool JSRTCPeerConnection::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCPeerConnection* thisObject = jsCast<JSRTCPeerConnection*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSRTCPeerConnection, Base>(exec, &JSRTCPeerConnectionTable, thisObject, propertyName, slot);
}

JSValue jsRTCPeerConnectionLocalDescription(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    ExceptionCode ec = 0;
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->localDescription(ec)));
    setDOMException(exec, ec);
    return result;
}


JSValue jsRTCPeerConnectionRemoteDescription(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    ExceptionCode ec = 0;
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->remoteDescription(ec)));
    setDOMException(exec, ec);
    return result;
}


JSValue jsRTCPeerConnectionSignalingState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSValue result = jsStringWithCache(exec, impl->signalingState());
    return result;
}


JSValue jsRTCPeerConnectionIceGatheringState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSValue result = jsStringWithCache(exec, impl->iceGatheringState());
    return result;
}


JSValue jsRTCPeerConnectionIceConnectionState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSValue result = jsStringWithCache(exec, impl->iceConnectionState());
    return result;
}


JSValue jsRTCPeerConnectionOnnegotiationneeded(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onnegotiationneeded()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOnicecandidate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onicecandidate()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOnsignalingstatechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onsignalingstatechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOnaddstream(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onaddstream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOnremovestream(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onremovestream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOniceconnectionstatechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->oniceconnectionstatechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionOndatachannel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->ondatachannel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsRTCPeerConnectionConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCPeerConnection* domObject = jsCast<JSRTCPeerConnection*>(asObject(slotBase));
    return JSRTCPeerConnection::getConstructor(exec, domObject->globalObject());
}

void JSRTCPeerConnection::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSRTCPeerConnection* thisObject = jsCast<JSRTCPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSRTCPeerConnection, Base>(exec, propertyName, value, &JSRTCPeerConnectionTable, thisObject, slot);
}

void setJSRTCPeerConnectionOnnegotiationneeded(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOnnegotiationneeded(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOnicecandidate(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOnicecandidate(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOnsignalingstatechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOnsignalingstatechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOnaddstream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOnaddstream(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOnremovestream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOnremovestream(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOniceconnectionstatechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOniceconnectionstatechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSRTCPeerConnectionOndatachannel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(thisObject);
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    impl->setOndatachannel(createJSAttributeEventListener(exec, value, thisObject));
}


JSValue JSRTCPeerConnection::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCPeerConnectionConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateOffer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<RTCSessionDescriptionCallback> successCallback = JSRTCSessionDescriptionCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<RTCErrorCallback> failureCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        failureCallback = JSRTCErrorCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    Dictionary mediaConstraints(exec, exec->argument(2));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->createOffer(successCallback, failureCallback, mediaConstraints, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateAnswer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<RTCSessionDescriptionCallback> successCallback = JSRTCSessionDescriptionCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<RTCErrorCallback> failureCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        failureCallback = JSRTCErrorCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    Dictionary mediaConstraints(exec, exec->argument(2));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->createAnswer(successCallback, failureCallback, mediaConstraints, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionSetLocalDescription(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    RTCSessionDescription* description(toRTCSessionDescription(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<VoidCallback> successCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        successCallback = JSVoidCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    RefPtr<RTCErrorCallback> failureCallback;
    if (exec->argumentCount() > 2 && !exec->argument(2).isUndefinedOrNull()) {
        if (!exec->argument(2).isFunction())
            return throwVMTypeError(exec);
        failureCallback = JSRTCErrorCallback::create(asObject(exec->argument(2)), castedThis->globalObject());
    }
    impl->setLocalDescription(description, successCallback, failureCallback, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionSetRemoteDescription(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    RTCSessionDescription* description(toRTCSessionDescription(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<VoidCallback> successCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        successCallback = JSVoidCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    RefPtr<RTCErrorCallback> failureCallback;
    if (exec->argumentCount() > 2 && !exec->argument(2).isUndefinedOrNull()) {
        if (!exec->argument(2).isFunction())
            return throwVMTypeError(exec);
        failureCallback = JSRTCErrorCallback::create(asObject(exec->argument(2)), castedThis->globalObject());
    }
    impl->setRemoteDescription(description, successCallback, failureCallback, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionUpdateIce(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    ExceptionCode ec = 0;
    Dictionary configuration(exec, exec->argument(0));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Dictionary mediaConstraints(exec, exec->argument(1));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->updateIce(configuration, mediaConstraints, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddIceCandidate(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    RTCIceCandidate* candidate(toRTCIceCandidate(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->addIceCandidate(candidate, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetLocalStreams(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());

    JSC::JSValue result = jsArray(exec, castedThis->globalObject(), impl->getLocalStreams());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());

    JSC::JSValue result = jsArray(exec, castedThis->globalObject(), impl->getRemoteStreams());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetStreamById(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& streamId(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->getStreamById(streamId)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSMediaStream::info()))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Dictionary mediaConstraints(exec, exec->argument(1));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->addStream(stream, mediaConstraints, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionRemoveStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSMediaStream::info()))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->removeStream(stream, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetStats(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<RTCStatsCallback> successCallback = JSRTCStatsCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    MediaStreamTrack* selector(toMediaStreamTrack(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->getStats(successCallback, selector);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateDataChannel(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& label(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Dictionary options(exec, exec->argument(1));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createDataChannel(label, options, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateDTMFSender(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    MediaStreamTrack* track(toMediaStreamTrack(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createDTMFSender(track, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    ExceptionCode ec = 0;
    impl->close(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCPeerConnection::info()))
        return throwVMTypeError(exec);
    JSRTCPeerConnection* castedThis = jsCast<JSRTCPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCPeerConnection::info());
    RTCPeerConnection* impl = static_cast<RTCPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSRTCPeerConnection::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSRTCPeerConnection* thisObject = jsCast<JSRTCPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

static inline bool isObservable(JSRTCPeerConnection* jsRTCPeerConnection)
{
    if (jsRTCPeerConnection->hasCustomProperties())
        return true;
    if (jsRTCPeerConnection->impl()->hasEventListeners())
        return true;
    return false;
}

bool JSRTCPeerConnectionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSRTCPeerConnection* jsRTCPeerConnection = jsCast<JSRTCPeerConnection*>(handle.get().asCell());
    if (jsRTCPeerConnection->impl()->hasPendingActivity())
        return true;
    if (jsRTCPeerConnection->impl()->isFiringEventListeners())
        return true;
    if (!isObservable(jsRTCPeerConnection))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCPeerConnectionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSRTCPeerConnection* jsRTCPeerConnection = jsCast<JSRTCPeerConnection*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCPeerConnection->impl(), jsRTCPeerConnection);
    jsRTCPeerConnection->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCPeerConnection@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore17RTCPeerConnectionE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, RTCPeerConnection* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCPeerConnection>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCPeerConnection@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore17RTCPeerConnectionE[2];
#if COMPILER(CLANG)
    // If this fails RTCPeerConnection does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCPeerConnection), RTCPeerConnection_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCPeerConnection has subclasses. If RTCPeerConnection has subclasses that get passed
    // to toJS() we currently require RTCPeerConnection you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<RTCPeerConnection>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSRTCPeerConnection>(exec, globalObject, impl);
}

RTCPeerConnection* toRTCPeerConnection(JSC::JSValue value)
{
    return value.inherits(JSRTCPeerConnection::info()) ? jsCast<JSRTCPeerConnection*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
