/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(BATTERY_STATUS)

#include "JSBatteryManager.h"

#include "BatteryManager.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSBatteryManagerTableValues[] =
{
    { "charging", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerCharging), (intptr_t)0, NoIntrinsic },
    { "chargingTime", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerChargingTime), (intptr_t)0, NoIntrinsic },
    { "dischargingTime", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerDischargingTime), (intptr_t)0, NoIntrinsic },
    { "level", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerLevel), (intptr_t)0, NoIntrinsic },
    { "onchargingchange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnchargingchange), (intptr_t)setJSBatteryManagerOnchargingchange, NoIntrinsic },
    { "onchargingtimechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnchargingtimechange), (intptr_t)setJSBatteryManagerOnchargingtimechange, NoIntrinsic },
    { "ondischargingtimechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOndischargingtimechange), (intptr_t)setJSBatteryManagerOndischargingtimechange, NoIntrinsic },
    { "onlevelchange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnlevelchange), (intptr_t)setJSBatteryManagerOnlevelchange, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSBatteryManagerTable = { 17, 15, JSBatteryManagerTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSBatteryManagerPrototypeTableValues[] =
{
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionAddEventListener), (intptr_t)2, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionRemoveEventListener), (intptr_t)2, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSBatteryManagerPrototypeTable = { 8, 7, JSBatteryManagerPrototypeTableValues, 0 };
const ClassInfo JSBatteryManagerPrototype::s_info = { "BatteryManagerPrototype", &Base::s_info, &JSBatteryManagerPrototypeTable, 0, CREATE_METHOD_TABLE(JSBatteryManagerPrototype) };

JSObject* JSBatteryManagerPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSBatteryManager>(exec, globalObject);
}

bool JSBatteryManagerPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSBatteryManagerPrototype* thisObject = jsCast<JSBatteryManagerPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, &JSBatteryManagerPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSBatteryManager::s_info = { "BatteryManager", &Base::s_info, &JSBatteryManagerTable, 0 , CREATE_METHOD_TABLE(JSBatteryManager) };

JSBatteryManager::JSBatteryManager(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<BatteryManager> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSBatteryManager::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSBatteryManager::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSBatteryManagerPrototype::create(exec->vm(), globalObject, JSBatteryManagerPrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSBatteryManager::destroy(JSC::JSCell* cell)
{
    JSBatteryManager* thisObject = static_cast<JSBatteryManager*>(cell);
    thisObject->JSBatteryManager::~JSBatteryManager();
}

JSBatteryManager::~JSBatteryManager()
{
    releaseImplIfNotNull();
}

bool JSBatteryManager::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSBatteryManager* thisObject = jsCast<JSBatteryManager*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSBatteryManager, Base>(exec, &JSBatteryManagerTable, thisObject, propertyName, slot);
}

JSValue jsBatteryManagerCharging(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue result = jsBoolean(impl->charging());
    return result;
}


JSValue jsBatteryManagerChargingTime(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue result = jsNumber(impl->chargingTime());
    return result;
}


JSValue jsBatteryManagerDischargingTime(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue result = jsNumber(impl->dischargingTime());
    return result;
}


JSValue jsBatteryManagerLevel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue result = jsNumber(impl->level());
    return result;
}


JSValue jsBatteryManagerOnchargingchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    if (EventListener* listener = impl->onchargingchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsBatteryManagerOnchargingtimechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    if (EventListener* listener = impl->onchargingtimechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsBatteryManagerOndischargingtimechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    if (EventListener* listener = impl->ondischargingtimechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsBatteryManagerOnlevelchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    if (EventListener* listener = impl->onlevelchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


void JSBatteryManager::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSBatteryManager* thisObject = jsCast<JSBatteryManager*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSBatteryManager, Base>(exec, propertyName, value, &JSBatteryManagerTable, thisObject, slot);
}

void setJSBatteryManagerOnchargingchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(thisObject);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    impl->setOnchargingchange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSBatteryManagerOnchargingtimechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(thisObject);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    impl->setOnchargingtimechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSBatteryManagerOndischargingtimechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(thisObject);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    impl->setOndischargingtimechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSBatteryManagerOnlevelchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(thisObject);
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    impl->setOnlevelchange(createJSAttributeEventListener(exec, value, thisObject));
}


EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSBatteryManager::info()))
        return throwVMTypeError(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSBatteryManager::info()))
        return throwVMTypeError(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSBatteryManager::info()))
        return throwVMTypeError(exec);
    JSBatteryManager* castedThis = jsCast<JSBatteryManager*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    BatteryManager* impl = static_cast<BatteryManager*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSBatteryManager::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSBatteryManager* thisObject = jsCast<JSBatteryManager*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

static inline bool isObservable(JSBatteryManager* jsBatteryManager)
{
    if (jsBatteryManager->hasCustomProperties())
        return true;
    if (jsBatteryManager->impl()->hasEventListeners())
        return true;
    return false;
}

bool JSBatteryManagerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSBatteryManager* jsBatteryManager = jsCast<JSBatteryManager*>(handle.get().asCell());
    if (jsBatteryManager->impl()->hasPendingActivity())
        return true;
    if (jsBatteryManager->impl()->isFiringEventListeners())
        return true;
    if (!isObservable(jsBatteryManager))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSBatteryManagerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSBatteryManager* jsBatteryManager = jsCast<JSBatteryManager*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsBatteryManager->impl(), jsBatteryManager);
    jsBatteryManager->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7BatteryManager@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14BatteryManagerE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, BatteryManager* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSBatteryManager>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7BatteryManager@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore14BatteryManagerE[2];
#if COMPILER(CLANG)
    // If this fails BatteryManager does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(BatteryManager), BatteryManager_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // BatteryManager has subclasses. If BatteryManager has subclasses that get passed
    // to toJS() we currently require BatteryManager you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<BatteryManager>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSBatteryManager>(exec, globalObject, impl);
}

BatteryManager* toBatteryManager(JSC::JSValue value)
{
    return value.inherits(JSBatteryManager::info()) ? jsCast<JSBatteryManager*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(BATTERY_STATUS)
