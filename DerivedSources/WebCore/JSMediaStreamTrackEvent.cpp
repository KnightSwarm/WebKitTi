/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamTrackEvent.h"

#include "JSMediaStreamTrack.h"
#include "MediaStreamTrack.h"
#include "MediaStreamTrackEvent.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSMediaStreamTrackEventTableValues[] =
{
    { "track", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackEventTrack), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackEventTable = { 2, 1, JSMediaStreamTrackEventTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSMediaStreamTrackEventPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackEventPrototypeTable = { 1, 0, JSMediaStreamTrackEventPrototypeTableValues, 0 };
const ClassInfo JSMediaStreamTrackEventPrototype::s_info = { "MediaStreamTrackEventPrototype", &Base::s_info, &JSMediaStreamTrackEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackEventPrototype) };

JSObject* JSMediaStreamTrackEventPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamTrackEvent>(exec, globalObject);
}

const ClassInfo JSMediaStreamTrackEvent::s_info = { "MediaStreamTrackEvent", &Base::s_info, &JSMediaStreamTrackEventTable, 0 , CREATE_METHOD_TABLE(JSMediaStreamTrackEvent) };

JSMediaStreamTrackEvent::JSMediaStreamTrackEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamTrackEvent> impl)
    : JSEvent(structure, globalObject, impl)
{
}

void JSMediaStreamTrackEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSMediaStreamTrackEvent::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSMediaStreamTrackEventPrototype::create(exec->vm(), globalObject, JSMediaStreamTrackEventPrototype::createStructure(exec->vm(), globalObject, JSEventPrototype::self(exec, globalObject)));
}

bool JSMediaStreamTrackEvent::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSMediaStreamTrackEvent* thisObject = jsCast<JSMediaStreamTrackEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSMediaStreamTrackEvent, Base>(exec, &JSMediaStreamTrackEventTable, thisObject, propertyName, slot);
}

JSValue jsMediaStreamTrackEventTrack(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMediaStreamTrackEvent* castedThis = jsCast<JSMediaStreamTrackEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamTrackEvent* impl = static_cast<MediaStreamTrackEvent*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->track()));
    return result;
}



}

#endif // ENABLE(MEDIA_STREAM)
