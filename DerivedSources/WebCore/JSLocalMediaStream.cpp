/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSLocalMediaStream.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "LocalMediaStream.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSLocalMediaStreamTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsLocalMediaStreamConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamTable = { 2, 1, JSLocalMediaStreamTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSLocalMediaStreamConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamConstructorTable = { 1, 0, JSLocalMediaStreamConstructorTableValues, 0 };
const ClassInfo JSLocalMediaStreamConstructor::s_info = { "LocalMediaStreamConstructor", &Base::s_info, &JSLocalMediaStreamConstructorTable, 0, CREATE_METHOD_TABLE(JSLocalMediaStreamConstructor) };

JSLocalMediaStreamConstructor::JSLocalMediaStreamConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSLocalMediaStreamConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(info()));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSLocalMediaStreamPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSLocalMediaStreamConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSLocalMediaStreamConstructor, JSDOMWrapper>(exec, &JSLocalMediaStreamConstructorTable, jsCast<JSLocalMediaStreamConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSLocalMediaStreamPrototypeTableValues[] =
{
    { "stop", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsLocalMediaStreamPrototypeFunctionStop), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamPrototypeTable = { 2, 1, JSLocalMediaStreamPrototypeTableValues, 0 };
const ClassInfo JSLocalMediaStreamPrototype::s_info = { "LocalMediaStreamPrototype", &Base::s_info, &JSLocalMediaStreamPrototypeTable, 0, CREATE_METHOD_TABLE(JSLocalMediaStreamPrototype) };

JSObject* JSLocalMediaStreamPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSLocalMediaStream>(exec, globalObject);
}

bool JSLocalMediaStreamPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSLocalMediaStreamPrototype* thisObject = jsCast<JSLocalMediaStreamPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, &JSLocalMediaStreamPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSLocalMediaStream::s_info = { "LocalMediaStream", &Base::s_info, &JSLocalMediaStreamTable, 0 , CREATE_METHOD_TABLE(JSLocalMediaStream) };

JSLocalMediaStream::JSLocalMediaStream(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<LocalMediaStream> impl)
    : JSMediaStream(structure, globalObject, impl)
{
}

void JSLocalMediaStream::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSLocalMediaStream::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSLocalMediaStreamPrototype::create(exec->vm(), globalObject, JSLocalMediaStreamPrototype::createStructure(exec->vm(), globalObject, JSMediaStreamPrototype::self(exec, globalObject)));
}

bool JSLocalMediaStream::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSLocalMediaStream* thisObject = jsCast<JSLocalMediaStream*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSLocalMediaStream, Base>(exec, &JSLocalMediaStreamTable, thisObject, propertyName, slot);
}

JSValue jsLocalMediaStreamConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSLocalMediaStream* domObject = jsCast<JSLocalMediaStream*>(asObject(slotBase));
    return JSLocalMediaStream::getConstructor(exec, domObject->globalObject());
}

JSValue JSLocalMediaStream::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSLocalMediaStreamConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsLocalMediaStreamPrototypeFunctionStop(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSLocalMediaStream::info()))
        return throwVMTypeError(exec);
    JSLocalMediaStream* castedThis = jsCast<JSLocalMediaStream*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSLocalMediaStream::info());
    LocalMediaStream* impl = static_cast<LocalMediaStream*>(castedThis->impl());
    impl->stop();
    return JSValue::encode(jsUndefined());
}

void JSLocalMediaStream::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSLocalMediaStream* thisObject = jsCast<JSLocalMediaStream*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7LocalMediaStream@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16LocalMediaStreamE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, LocalMediaStream* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSLocalMediaStream>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7LocalMediaStream@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16LocalMediaStreamE[2];
#if COMPILER(CLANG)
    // If this fails LocalMediaStream does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(LocalMediaStream), LocalMediaStream_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // LocalMediaStream has subclasses. If LocalMediaStream has subclasses that get passed
    // to toJS() we currently require LocalMediaStream you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<LocalMediaStream>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSLocalMediaStream>(exec, globalObject, impl);
}

LocalMediaStream* toLocalMediaStream(JSC::JSValue value)
{
    return value.inherits(JSLocalMediaStream::info()) ? jsCast<JSLocalMediaStream*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
