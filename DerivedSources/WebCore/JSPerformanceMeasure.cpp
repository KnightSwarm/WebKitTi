/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(USER_TIMING)

#include "JSPerformanceMeasure.h"

#include "PerformanceMeasure.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSPerformanceMeasureTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceMeasureConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceMeasureTable = { 2, 1, JSPerformanceMeasureTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSPerformanceMeasureConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceMeasureConstructorTable = { 1, 0, JSPerformanceMeasureConstructorTableValues, 0 };
const ClassInfo JSPerformanceMeasureConstructor::s_info = { "PerformanceMeasureConstructor", &Base::s_info, &JSPerformanceMeasureConstructorTable, 0, CREATE_METHOD_TABLE(JSPerformanceMeasureConstructor) };

JSPerformanceMeasureConstructor::JSPerformanceMeasureConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSPerformanceMeasureConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(info()));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSPerformanceMeasurePrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSPerformanceMeasureConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPerformanceMeasureConstructor, JSDOMWrapper>(exec, &JSPerformanceMeasureConstructorTable, jsCast<JSPerformanceMeasureConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSPerformanceMeasurePrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceMeasurePrototypeTable = { 1, 0, JSPerformanceMeasurePrototypeTableValues, 0 };
const ClassInfo JSPerformanceMeasurePrototype::s_info = { "PerformanceMeasurePrototype", &Base::s_info, &JSPerformanceMeasurePrototypeTable, 0, CREATE_METHOD_TABLE(JSPerformanceMeasurePrototype) };

JSObject* JSPerformanceMeasurePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPerformanceMeasure>(exec, globalObject);
}

const ClassInfo JSPerformanceMeasure::s_info = { "PerformanceMeasure", &Base::s_info, &JSPerformanceMeasureTable, 0 , CREATE_METHOD_TABLE(JSPerformanceMeasure) };

JSPerformanceMeasure::JSPerformanceMeasure(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<PerformanceMeasure> impl)
    : JSPerformanceEntry(structure, globalObject, impl)
{
}

void JSPerformanceMeasure::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSPerformanceMeasure::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSPerformanceMeasurePrototype::create(exec->vm(), globalObject, JSPerformanceMeasurePrototype::createStructure(exec->vm(), globalObject, JSPerformanceEntryPrototype::self(exec, globalObject)));
}

bool JSPerformanceMeasure::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSPerformanceMeasure* thisObject = jsCast<JSPerformanceMeasure*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSPerformanceMeasure, Base>(exec, &JSPerformanceMeasureTable, thisObject, propertyName, slot);
}

JSValue jsPerformanceMeasureConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceMeasure* domObject = jsCast<JSPerformanceMeasure*>(asObject(slotBase));
    return JSPerformanceMeasure::getConstructor(exec, domObject->globalObject());
}

JSValue JSPerformanceMeasure::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPerformanceMeasureConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(USER_TIMING)
