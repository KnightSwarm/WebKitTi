/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSNavigatorUserMediaError.h"

#include "NavigatorUserMediaError.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSNavigatorUserMediaErrorTableValues[] =
{
    { "code", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorCode), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavigatorUserMediaErrorTable = { 2, 1, JSNavigatorUserMediaErrorTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSNavigatorUserMediaErrorPrototypeTableValues[] =
{
    { "PERMISSION_DENIED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorPERMISSION_DENIED), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavigatorUserMediaErrorPrototypeTable = { 2, 1, JSNavigatorUserMediaErrorPrototypeTableValues, 0 };
const ClassInfo JSNavigatorUserMediaErrorPrototype::s_info = { "NavigatorUserMediaErrorPrototype", &Base::s_info, &JSNavigatorUserMediaErrorPrototypeTable, 0, CREATE_METHOD_TABLE(JSNavigatorUserMediaErrorPrototype) };

JSObject* JSNavigatorUserMediaErrorPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavigatorUserMediaError>(exec, globalObject);
}

bool JSNavigatorUserMediaErrorPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSNavigatorUserMediaErrorPrototype* thisObject = jsCast<JSNavigatorUserMediaErrorPrototype*>(object);
    return getStaticValueSlot<JSNavigatorUserMediaErrorPrototype, JSObject>(exec, &JSNavigatorUserMediaErrorPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSNavigatorUserMediaError::s_info = { "NavigatorUserMediaError", &Base::s_info, &JSNavigatorUserMediaErrorTable, 0 , CREATE_METHOD_TABLE(JSNavigatorUserMediaError) };

JSNavigatorUserMediaError::JSNavigatorUserMediaError(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavigatorUserMediaError> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavigatorUserMediaError::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSNavigatorUserMediaError::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavigatorUserMediaErrorPrototype::create(exec->vm(), globalObject, JSNavigatorUserMediaErrorPrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSNavigatorUserMediaError::destroy(JSC::JSCell* cell)
{
    JSNavigatorUserMediaError* thisObject = static_cast<JSNavigatorUserMediaError*>(cell);
    thisObject->JSNavigatorUserMediaError::~JSNavigatorUserMediaError();
}

JSNavigatorUserMediaError::~JSNavigatorUserMediaError()
{
    releaseImplIfNotNull();
}

bool JSNavigatorUserMediaError::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSNavigatorUserMediaError* thisObject = jsCast<JSNavigatorUserMediaError*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSNavigatorUserMediaError, Base>(exec, &JSNavigatorUserMediaErrorTable, thisObject, propertyName, slot);
}

JSValue jsNavigatorUserMediaErrorCode(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNavigatorUserMediaError* castedThis = jsCast<JSNavigatorUserMediaError*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavigatorUserMediaError* impl = static_cast<NavigatorUserMediaError*>(castedThis->impl());
    JSValue result = jsNumber(impl->code());
    return result;
}


// Constant getters

JSValue jsNavigatorUserMediaErrorPERMISSION_DENIED(ExecState* exec, JSValue, PropertyName)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

static inline bool isObservable(JSNavigatorUserMediaError* jsNavigatorUserMediaError)
{
    if (jsNavigatorUserMediaError->hasCustomProperties())
        return true;
    return false;
}

bool JSNavigatorUserMediaErrorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavigatorUserMediaError* jsNavigatorUserMediaError = jsCast<JSNavigatorUserMediaError*>(handle.get().asCell());
    if (!isObservable(jsNavigatorUserMediaError))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavigatorUserMediaErrorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavigatorUserMediaError* jsNavigatorUserMediaError = jsCast<JSNavigatorUserMediaError*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavigatorUserMediaError->impl(), jsNavigatorUserMediaError);
    jsNavigatorUserMediaError->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7NavigatorUserMediaError@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore23NavigatorUserMediaErrorE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavigatorUserMediaError* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSNavigatorUserMediaError>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7NavigatorUserMediaError@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore23NavigatorUserMediaErrorE[2];
#if COMPILER(CLANG)
    // If this fails NavigatorUserMediaError does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(NavigatorUserMediaError), NavigatorUserMediaError_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // NavigatorUserMediaError has subclasses. If NavigatorUserMediaError has subclasses that get passed
    // to toJS() we currently require NavigatorUserMediaError you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<NavigatorUserMediaError>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSNavigatorUserMediaError>(exec, globalObject, impl);
}

NavigatorUserMediaError* toNavigatorUserMediaError(JSC::JSValue value)
{
    return value.inherits(JSNavigatorUserMediaError::info()) ? jsCast<JSNavigatorUserMediaError*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
